<!DOCTYPE html>

<html>
<head>
    <title> Integrative Bandit </title>
    <script src="js/jspsych.js"></script>
    <script src="js/plugin-html-keyboard-response.js"></script>
    <script src="js/plugin-image-keyboard-response.js"></script>
    <script src="js/plugin-fullscreen.js"></script>
    <script src="js/plugin-html-slider-response.js"></script>
    <script src="reward_matrix.js"></script>
    <script src="instructions.js"></script>
    <link href="https://unpkg.com/jspsych@7.3.3/css/jspsych.css" rel="stylesheet" type="text/css" />
</head>
<body>
</body>
<script>

// Define experiment parameters
//TODO: load from json file
var NUM_TRIALS = 5;
var NUM_OPTIONS = 2;
const COSTS = Array(NUM_OPTIONS).fill(1); //Costs of each arm
const REWARD_PROBABILITIES = Array(NUM_OPTIONS).fill(0.5); //
const NAME = "Integrative Bandit";
const SOCIAL_VERSION = 'social'; // false for non-social, true for social version



//general experimental procedure
//load parameters from other files

// Initialize jsPsych
const jsPsych = initJsPsych({
    on_finish: function() {
        // Get all data and ignore multiple columns
        var all_data = jsPsych.data.get()
            .filter({tag: ['trial', 'rating']})
            .ignore([
            'stimulus',
            'trial_type',
            'internal_node_id',
            'view_history',
            'time_elapsed',
            'response_label',
            'slider_start',
            'success',
            'trial_index',
            'plugin_version',
            'total_reward',
            'tag'
        ]);

        
        
        // Download CSV file
        const filename = `bandit_data_${Date.now()}.csv`;
        all_data.localSave('csv', filename);
        
        // Also log to console for debugging
        console.log(all_data.csv());
    },
    show_progress_bar: true
});

// fullscreen
const enterFullscreen = {
    type: jsPsychFullscreen,
    fullscreen_mode: true,
    message: '<p>The experiment will start in fullscreen mode.</p><p>Click the button below to enter fullscreen mode.</p>',
    button_label: 'Enter Fullscreen',
    data: {
        tag: 'enter_fullscreen'
    }
};


// exit fullscreen
const exitFullscreen = {
    type: jsPsychFullscreen,
    fullscreen_mode: false,
    data: {
        tag: 'exit_fullscreen'
    }
};


// Welcome
const welcome = {
    type: jsPsychHtmlKeyboardResponse,
    stimulus: `<h1>Welcome to the ${NAME} game</h1><p>[Press any key to continue]</p>`,
    data: {
        tag: 'welcome'
    } 
};


// Debrief
const debrief = {
    type: jsPsychHtmlKeyboardResponse,
    stimulus: function() {
        const totalReward = jsPsych.data.get().select('reward').sum();
        return `
            <h2>Experiment finished</h2>
            <p>Your total score: ${totalReward}</p>
            <p>Thank you for your participation!</p>
            <p>[Press any key to exit]</p>
        `;
    },
    data: {
        tag: 'debrief'
    }
};


// Load image stimuli and shuffle them
// Adaptive to different NUM_OPTIONS
const unshuffledimages = Array(NUM_OPTIONS).fill().map((_, i) => 
    `img/${SOCIAL_VERSION}/arm${i+1}.png`
);

//shuffle the images
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}
const images = shuffleArray([...unshuffledimages]);




// Instructions
//social/non-social instruction depends on version; instruction tests are stored in instructions.js
//auto generate option stimulis based on the number of options
const instructions = {
    type: jsPsychHtmlKeyboardResponse,
    stimulus: function() {
        const text = instruction_texts[SOCIAL_VERSION];
        
        return `    
            <p><b>${text.title}</b></p>
            ${text.description.map(line => `<p>${line}</p>`).join('')}
            <p>${text.choice_text}</p>    
            <div style='width: 100%; display: flex; justify-content: center;'>
                ${Array(NUM_OPTIONS).fill().map((_, i) => `
                <div style='width: 20%; margin: 0 5%; text-align: center;'>
                    <img src='${images[i]}' style='max-width: 80%;'></img>
                    <p class='small'><strong>Press key ${i+1}</strong></p>
                </div>
                `).join('')}
                </div>
            </div>
            <p>[Press any key to begin]</p>
        `;
    },
    data: function() {
        return {
            tag: 'instructions',
            version: SOCIAL_VERSION
        };
    }
};

// Create trial
//auto generate option stimulis based on the number of options
function createTrial(trialIndex) {
    return {
        type: jsPsychHtmlKeyboardResponse,
        stimulus: `
            <div style='width: 100%; display: flex; justify-content: center;'>
            ${Array(NUM_OPTIONS).fill().map((_, i) => `
                <div style='width: 40%; margin: 0 5%; text-align: center;'>
                    <img src='${images[i]}' style='max-width: 80%;'></img>
                    <p class='small'><strong>Press key ${i+1}</strong></p>
                </div>
            `).join('')}
        </div>
        `,
        choices: Array(NUM_OPTIONS).fill().map((_, i) => (i + 1).toString()),
        on_finish: function(data) {
            const choice = parseInt(data.response) - 1;
            const reward = allRewards[trialIndex][choice];
            data.reward = reward;
            data.total_reward = jsPsych.data.get().select('reward').sum();
        },
        data: {
            tag: 'trial'
        }
    };
}


// Feedback
function createFeedback(trialIndex) {
    return {
        type: jsPsychHtmlKeyboardResponse,
        stimulus: function() {
            const lastTrial = jsPsych.data.get().last(1).values()[0];
            const selectedImage = images[parseInt(lastTrial.response) - 1];
            const collaborationResult = lastTrial.reward > 0 ? "Successful" : "Unsuccessful";
            
            // adjust text according to version
            const partnerText = SOCIAL_VERSION === 'social' ? 
                `You collaborated with Partner ${lastTrial.response}` : 
                `You selected Option ${lastTrial.response}`;
            const outcomeText = SOCIAL_VERSION === 'social' ? 
                `Collaboration outcome: ${collaborationResult}` :
                `Outcome: ${collaborationResult}`;
            
            return `
                <div style='display: flex; align-items: center; justify-content: center;'>
                    <img src='${selectedImage}' style='width: 50%; height: 60%; object-fit: contain;'></img>
                    <div>
                        <p style='width: 120%;'>${partnerText}</p>
                        <p style='width: 120%;'>${outcomeText}</p>
                        <p style='width: 120%;'>Your gain in this round: ${lastTrial.reward}</p>
                        <p style='width: 120%;'>Your total score so far: ${lastTrial.total_reward}</p>
                    </div>
                    </div>
                </div>
                <p>[Press any key to continue]</p>
            `;
        },
        data: {
            tag: 'feedback'
        }
    };
}




// Create probability rating trials for each arm
const probabilityRatings = images.map((image, index) => {
    return {
        type: jsPsychHtmlSliderResponse,
        stimulus: `
            <div style='margin: 2em 0;'>
                <img src='${image}' style='width: 30%; height: 30%; object-fit: contain;'></img>
                <p><strong>${SOCIAL_VERSION === 'social' ? 
                    `How reliable is Partner ${index + 1}?` : 
                    `How rewarding is Option ${index + 1}?`}</strong></p>
                <p style='font-size: 0.8em; color: #666;'>${SOCIAL_VERSION === 'social' ?
                    '(0 = Very unreliable, 100 = Very reliable)' :
                    '(0 = Very bad, 100 = Very good)'}</p>
            </div>
        `,
        labels: ['0%', '100%'],
        slider_width: 500,
        require_movement: true,
        data: {
            tag: `rating`,
            arm: index + 1
        }
    };
});







// Generate rewards for all trials
//Bernoulli rewards
//TODO: add other types of reward distributions
//TODO: use matrix to generate rewards
function generateRewards(numTrials, rewardProbs) {
    let rewards = [];
    for (let i = 0; i < numTrials; i++) {
        let trialRewards = rewardProbs.map((prob, index) => {
            const success = Math.random() < prob;
            const gain = success ? 1 : 0;
            return gain
        });
        rewards.push(trialRewards);
    }
    return rewards;
}
const allRewards = generateRewards(NUM_TRIALS, REWARD_PROBABILITIES);






// Create experiment timeline
let timeline = [enterFullscreen, welcome, instructions];

for (let i = 0; i < NUM_TRIALS; i++) {
    timeline.push(createTrial(i));
    timeline.push(createFeedback(i));
}

// Add all probability ratings to timeline
probabilityRatings.forEach(rating => {
    timeline.push(rating);
});

timeline.push([debrief, exitFullscreen]);

// Run experiment
jsPsych.run(timeline);

</script>
</html>
